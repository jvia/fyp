package aucom.main;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import joptsimple.OptionParser;
import joptsimple.OptionSet;
import joptsimple.OptionSpec;
import net.sf.xcf.fts.engine.EngineThread;
import net.sf.xcf.fts.engine.Graph;
import net.sf.xcf.fts.nodes.sink.CollectionSink;
import nu.xom.Document;
import nu.xom.Element;
import aucom.nodes.XCFDataSource;

public class RecordXcf {
	private Graph graph;
	private ArrayList<Document> sinkLinkedList;
	private ScheduledExecutorService service;
	private EngineThread thread;
	private StateBlockingNode statenode;
	private XCFDataSource source;
	public RecordXcf() {
		sinkLinkedList = new ArrayList<Document>();
		statenode = new StateBlockingNode(false);
		source = new XCFDataSource(new LinkedBlockingQueue<Document>());
		graph = new Graph().getConnector(getSource()).connect(
				statenode)
				.connect(new CollectionSink<Document>(sinkLinkedList))
				.getGraph();
	}

	private void record(final File file, final long duration) {
		record();
		final Long startingTime = System.currentTimeMillis();
		service = Executors.newScheduledThreadPool(1);
		service.scheduleAtFixedRate(new Runnable() {
			public void run() {
				if (System.currentTimeMillis() > startingTime + duration) {
					stopRecording();
					save(file);
					service.shutdown();
				}
			}
		}, 100, 500, TimeUnit.MILLISECONDS);
	}

	public void record(final long duration) {
		record();
		final Long startingTime = System.currentTimeMillis();
		service = Executors.newScheduledThreadPool(1);
		service.scheduleAtFixedRate(new Runnable() {
			public void run() {
				if (System.currentTimeMillis() > startingTime + duration) {
					stopRecording();
					service.shutdown();
				}
			}
		}, 100, 500, TimeUnit.MILLISECONDS);
	}

	private void record() {
		if (thread == null) {
			thread = new EngineThread(graph);
			thread.start();
		}
		startRecording();
	}

	public void stopRecording() {
		statenode.disable();
	}
	public void startRecording(){
		statenode.enable();
	}
	public void save(File file) {
		stopRecording();
		FileWriter out;
		try {
			out = new FileWriter(file);
			statenode.disable();
			Logger.getLogger(this.getClass().getCanonicalName()).info(
					"flushing started");
			Document doc = new Document(new Element("events"));
			for (Document d : sinkLinkedList) {
				try {
					doc.getRootElement().appendChild(d.getRootElement().copy());
				} catch (Exception e) {
					System.out.println(d);
					System.exit(0);
				}
			}
			out.write(doc.toXML());
			System.out.println(doc.getRootElement().getChildCount()
					+ " events flushed to " + file.getName());
		} catch (IOException e) {
			Logger.getLogger(this.getClass().getCanonicalName()).severe(
					e.getLocalizedMessage());
		} catch (NullPointerException e) {
			Logger.getLogger(this.getClass().getCanonicalName()).severe(
					e.getLocalizedMessage());
		}
		startRecording();
	}

	public static void main(String[] args) {
		RecordXcf record = new RecordXcf();
		OptionParser parser = new OptionParser();
		OptionSpec<Long> d = parser.accepts("d").withRequiredArg().ofType(
				Long.class);
		OptionSpec<File> o = parser.accepts("o").withRequiredArg().ofType(
				File.class);

		OptionSet option = parser.parse(args);
		boolean saveToFile = false;
		if (option.has(d)) {
			record.record(d.value(option));

		} else if (option.has(d) && option.has(d)) {
			record.record(o.value(option), d.value(option));
		} else {
			record.record();
		}
	}

	public XCFDataSource getSource() {
		return source;
	}
	public ArrayList<Document> getsinkLinkedList(){
		return sinkLinkedList;
	}
}