package aucom.main;

import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Logger;

import net.sf.xcf.fts.Node;
import net.sf.xcf.fts.engine.EngineThread;
import net.sf.xcf.fts.engine.Graph;
import net.sf.xcf.fts.nodes.sink.OutputStreamSink;
import aucom.data.AbstractData;
import aucom.data.util.BasicClassifier;
import aucom.data.util.DataExtractor;
import aucom.data.util.Observation;
import aucom.fts.source.SequenceQueueSource;
import aucom.fts.tranform.CalcEntropyAvgScore;
import aucom.fts.tranform.EncodeData;
import aucom.fts.tranform.StringToBufferOutputEvent;
import aucom.fts.tranform.T2GramDataToString;
import aucom.fts.tranform.TestModel;
import aucom.models.t2gram.DurationPobabilityModel;


// TODO broken tool, fix it
public class ExtractFeatures implements Observer {
	private Graph graph;
	private EngineThread thread;
	DurationPobabilityModel model;
	private DataExtractor extractor;
	private LinkedBlockingQueue<PointData> inputQueue;
	private ExtractFeatures outputArray;
	private SequenceQueueSource<PointData> source;
	private OutputStreamSink streamSinksink;
	private OutputStream out;
	private StringToBufferOutputEvent str2Buffer;
	private BasicClassifier classifier;
	private CalcEntropyAvgScore entropyCalculator;
	public ExtractFeatures(File classFile) {
		setExtractor(new DataExtractor());
		this.model =  new DurationPobabilityModel();
		initGraph(classFile);
	}
	public ExtractFeatures(File classFile, File mFile) {
		this.model = loadModel(mFile);
		setExtractor(new DataExtractor());
		initGraph(classFile);
//		getSource().getObservable().addObserver(this);
	}
	public ArrayList<Observation> loadObservations(File f){
		
	}
	public ArrayList<PointData> extractRawData(File f){
		ArrayList<AbstractData> d;
		try {
			d = DataExtractor.getInstance().extract(f);
			ArrayList<PointData> dd = new ArrayList<PointData>();
			for(AbstractData data : d){
				if(data instanceof PointData)
					dd.add((PointData)data);
			}
			return dd;
		} catch (FileNotFoundException e) {
			Logger.getLogger(this.getClass().getName()).severe("file not found: " + f.getAbsolutePath());
			return null;
		}
	}
	private void initGraph(File classFile) {
		this.classifier = BasicClassifier.getInstance();
		setInputQueue(new LinkedBlockingQueue<PointData>());
//		setSource(new SequenceQueueSource<Data>(getInputQueue(), "source"));
		T2GramDataToString t2gramToString = new T2GramDataToString();
		TestModel test = new TestModel(this.model);
		setStr2Buffer(new StringToBufferOutputEvent());
		EncodeData classify = new EncodeData();
		setStreamSinksink(new OutputStreamSink(getOut()));
		this.entropyCalculator = new CalcEntropyAvgScore(this.model);
		setGraph(new Graph());
		getGraph().connect(getSource(), classify);
		getGraph().connect(classify, test);
		getGraph().connect(test, this.entropyCalculator);
		getGraph().connect((Node)this.entropyCalculator, t2gramToString);
		getGraph().connect(t2gramToString, getStr2Buffer());
	}
	public void transform(File dataFile, File output){
		Logger.getLogger(this.getClass().getCanonicalName()).info("transforming" + dataFile  + " to " + output);
		try {
			FileOutputStream fileoutputstream = new FileOutputStream(output);
			OutputStreamSink streamsink = new OutputStreamSink(fileoutputstream);
			this.setStreamSinksink(streamsink);
			getGraph().connect(this.getStr2Buffer(), this.getStreamSinksink());
			setThread(new EngineThread(getGraph()));
			getThread().start();
			ArrayList<PointData> d = extractRawData(dataFile);
			ArrayList<String> precedessors = getPrecedessorIdsInCorrectOrder(d);
			String precedessorStr = "timestamp;id;score;";
			for(String precedessor: precedessors){
				precedessorStr += precedessor;
				precedessorStr += ";";
			}
			precedessorStr += "\n";
			try {
				fileoutputstream.write(precedessorStr.getBytes());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			this.inputQueue.addAll(d);
		} catch (FileNotFoundException e) {
			Logger.getLogger(this.getClass().getName()).severe("file not found: " + output.getAbsolutePath());
		}
	}
	private ArrayList<String> getPrecedessorIdsInCorrectOrder(
			ArrayList<PointData> d) {
		ArrayList<String> out = new ArrayList<String>();
		for(AbstractData data: d){
			if(data instanceof PointData){
				data.setEventTypeId(classifier.classify((PointData)data));
			}
			if(!out.contains(String.valueOf(data.getEventTypeId()))){
				out.add(String.valueOf(data.getEventTypeId()));
				out.add(String.valueOf(data.getEventTypeId()));
				out.add(String.valueOf(data.getEventTypeId()));
			}
		}
		return out;
	}
	private DurationPobabilityModel loadModel(File file){
		ObjectInputStream in;
		 
		try {
			in = new ObjectInputStream(new FileInputStream(file));
			DurationPobabilityModel m = (DurationPobabilityModel) in.readObject();
			return m;
		} catch (EOFException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return null;
	}

	public static void main(String[] args) {
		if(args.length==0)
			return;
		File classfile = new File(args[0]);
		File modelfile = new File(args[1]);
		File inputfile = new File(args[2]);
		File output = new File(args[3]);
		ExtractFeatures e = new ExtractFeatures(classfile, modelfile);
		e.transform(inputfile, output);
	}
	public void setOutputArray(ExtractFeatures outputArray) {
		this.outputArray = outputArray;
	}
	public ExtractFeatures getOutputArray() {
		return this.outputArray;
	}
	public void setExtractor(DataExtractor extractor) {
		this.extractor = extractor;
	}
	public DataExtractor getExtractor() {
		return this.extractor;
	}
	public void setInputQueue(LinkedBlockingQueue<PointData> inputQueue) {
		this.inputQueue = inputQueue;
	}
	public LinkedBlockingQueue<PointData> getInputQueue() {
		return this.inputQueue;
	}
	public void setOut(OutputStream out) {
		this.out = out;
	}
	public OutputStream getOut() {
		return out;
	}
	@Override
	public void update(Observable arg0, Object arg1) {
		Logger.getLogger(this.getClass().getCanonicalName()).info("done");
	}
	public void setThread(EngineThread thread) {
		this.thread = thread;
	}
	public EngineThread getThread() {
		return thread;
	}
	public void setGraph(Graph graph) {
		this.graph = graph;
	}
	public Graph getGraph() {
		return graph;
	}
	public void setSource(SequenceQueueSource<PointData> source) {
		this.source = source;
	}
	public SequenceQueueSource<PointData> getSource() {
		return source;
	}
	public void setStr2Buffer(StringToBufferOutputEvent str2Buffer) {
		this.str2Buffer = str2Buffer;
	}
	public StringToBufferOutputEvent getStr2Buffer() {
		return str2Buffer;
	}
	public void setStreamSinksink(OutputStreamSink streamSinksink) {
		this.streamSinksink = streamSinksink;
	}
	public OutputStreamSink getStreamSinksink() {
		return streamSinksink;
	}

}
