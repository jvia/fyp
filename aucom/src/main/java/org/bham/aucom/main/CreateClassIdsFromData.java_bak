package aucom.main;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import net.sf.xcf.fts.Node;
import net.sf.xcf.fts.Sink;
import net.sf.xcf.fts.engine.EngineThread;
import net.sf.xcf.fts.engine.Graph;
import net.sf.xcf.fts.export.DotGraphExport;
import net.sf.xcf.fts.nodes.sink.OutputStreamSink;
import net.sf.xcf.fts.nodes.source.CollectionIteratorSource;
import net.sf.xcf.fts.nodes.source.QueueHeadSource;
import net.sf.xcf.fts.nodes.transform.io.Filename2File;
import aucom.data.PointData;
import aucom.data.util.BasicClassifier;
import aucom.fts.sink.ClassifierSink;
import aucom.fts.sink.CollectionSink2;
import aucom.fts.tranform.ExtreactFileToData;
import aucom.util.DatFileFilter;

import com.martiansoftware.jsap.FlaggedOption;
import com.martiansoftware.jsap.JSAP;
import com.martiansoftware.jsap.JSAPException;
import com.martiansoftware.jsap.JSAPResult;
import com.martiansoftware.jsap.Parameter;
import com.martiansoftware.jsap.SimpleJSAP;

public class CreateClassIdsFromData {
	
	public static void main(String[] args) {
		try {
			Parameter[] p = new Parameter[3];
			p[0] = new FlaggedOption("existingFile", JSAP.STRING_PARSER, "", JSAP.NOT_REQUIRED, 'f',JSAP.NO_LONGFLAG, "an existing file with class ids");
			p[1] = new FlaggedOption("saveFile", JSAP.STRING_PARSER, "", JSAP.REQUIRED, 's',JSAP.NO_LONGFLAG, "File to sace the class ids");
			p[2] = new FlaggedOption("File|Folder", JSAP.STRING_PARSER, "", JSAP.REQUIRED, 'i',JSAP.NO_LONGFLAG, "Folder with .dat files or a .dat file which has to be scanned for class ids");
			SimpleJSAP o = new SimpleJSAP("class id generator","generates file with classids from a file or a set of files in a folder", p);
			JSAPResult config = o.parse(args);
	        if ( o.messagePrinted() ) System.exit( 1 );
	        System.out.println(o.messagePrinted());
	        String saveFileName = config.getString("saveFile");
	        String fileOrFolder = config.getString("dat");
	        File f = new File(fileOrFolder);
	        List<String> files = new ArrayList<String>();
	        if(f.isDirectory()){
	        	files.addAll(Arrays.asList(f.list(new DatFileFilter())));
	        }
	        BasicClassifier classifier = BasicClassifier.getInstance();
	        List<String> strClasses = new ArrayList<String>();
	        try {
	        	Sink filesink = new OutputStreamSink(new FileOutputStream(new File(saveFileName)));
	        	Node classifierSink = new ClassifierSink(classifier);
	        	BlockingQueue<PointData> queue = new LinkedBlockingQueue<PointData>();
	        	Graph g = new Graph();
	        	Node src = new  CollectionIteratorSource<String>(files);
	        	Node classSrc = new  CollectionIteratorSource<String>(strClasses);
	        	Sink collectionSink = new CollectionSink2(queue);
				Node src2 = new QueueHeadSource<PointData>(queue);
				Node extract = new ExtreactFileToData();
				Node filenameToFile = new Filename2File();
				
				g.connect(src, filenameToFile);
				g.connect(filenameToFile, extract);
				g.connect(extract, collectionSink);
				
				g.connect(src2, classifierSink);
				g.connect(classSrc, filesink);
				DotGraphExport exp = new DotGraphExport();
				exp.addGraph("test", g);
				try {
					FileWriter ff = new FileWriter(new File(
							"createclassidsgraph.dot"));
					ff.write(exp.getDotString());
					ff.flush();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				EngineThread runner = new EngineThread(g);
				runner.start();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
	        
		} catch (JSAPException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
