/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TrainerPanel.java
 *
 * Created on 19.06.2011, 14:52:11
 */

package org.bham.aucom.gui;

import nu.xom.ParsingException;
import nu.xom.ValidityException;
import org.bham.aucom.data.Observation;
import org.bham.aucom.data.io.AucomIO;
import org.bham.aucom.data.management.DataAlreadyExistsException;
import org.bham.aucom.data.timeseries.TimeSeries;
import org.bham.aucom.diagnoser.ModelTrainerListener;
import org.bham.aucom.diagnoser.StatusChangedEvent;
import org.bham.aucom.diagnoser.t2gram.T2GramModelTrainer;
import org.bham.aucom.fts.source.ActionFailedException;
import org.bham.aucom.util.ExampleFileFilter;
import org.bham.aucom.xcfrecorder.RecorderPanel;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * @author rgolombe
 */
public class TrainerPanel extends javax.swing.JPanel implements ModelTrainerListener {
    private static final long serialVersionUID = 0L;
    T2GramModelTrainer trainer;

    /**
     * Creates new form TrainerPanel
     */
    public TrainerPanel(T2GramModelTrainer inTrainer) {
        trainer = inTrainer;
        trainer.addModelTrainerListener(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainingButton = new javax.swing.JToggleButton();
        saveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();

        setPreferredSize(new java.awt.Dimension(500, 40));

        trainingButton.setText("train");
        trainingButton.setPreferredSize(new java.awt.Dimension(100, 30));
        trainingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainingButtonActionPerformed(evt);
            }
        });

        saveButton.setText("savemodel");
        saveButton.setEnabled(false);
        saveButton.setPreferredSize(new java.awt.Dimension(100, 30));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        infoTextArea.setColumns(20);
        infoTextArea.setRows(5);
        jScrollPane1.setViewportView(infoTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGroup(layout.createSequentialGroup()
                                      .addContainerGap(88, Short.MAX_VALUE)
                                      .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                      .addComponent(trainingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                      .addGap(49, 49, 49))
                      .addGroup(layout.createSequentialGroup()
                                      .addContainerGap()
                                      .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                      .addContainerGap(88, Short.MAX_VALUE))
                                 );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGroup(layout.createSequentialGroup()
                                      .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                      .addComponent(trainingButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                      .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                      .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                      .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                               );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
        Future<?> f = Executors.newSingleThreadExecutor().submit(new Runnable() {
            public void run() {
                try {
                    AucomIO.getInstance().writeFaultDetectionModel(trainer.getModel());
                } catch (Exception exception) {
                    exception.printStackTrace();
                }
            }
        });
    }// GEN-LAST:event_saveButtonActionPerformed

    private void trainingButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_trainingButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser(AucomIO.getInstance().getCurrentWorkingDirectory());
        fileChooser.setFileFilter(new ExampleFileFilter("obs", "training data"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            final File f = fileChooser.getSelectedFile();

            Executors.newSingleThreadExecutor().submit(new Runnable() {
                @SuppressWarnings("unchecked")
                @Override
                public void run() {
                    try {
                        currentTrainingTimeSeries = (TimeSeries<Observation>) AucomIO.getInstance().readTimeSeries(f);
                        trainer.reset();
                        trainer.start(currentTrainingTimeSeries);
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (ActionFailedException e) {
                        JOptionPane.showMessageDialog(TrainerPanel.this, e.getClass().getCanonicalName() + ": " + e.getReason(), "Training failed", JOptionPane.ERROR_MESSAGE);
                        TrainerPanel.this.trainingButton.setSelected(false);
                    } catch (ValidityException exception) {
                        // TODO Auto-generated catch block
                        exception.printStackTrace();
                    } catch (DataAlreadyExistsException exception) {
                        // TODO Auto-generated catch block
                        exception.printStackTrace();
                    } catch (ParsingException exception) {
                        // TODO Auto-generated catch block
                        exception.printStackTrace();
                    } catch (IOException exception) {
                        // TODO Auto-generated catch block
                        exception.printStackTrace();
                    } catch (Exception exception) {
                        // TODO Auto-generated catch block
                        exception.printStackTrace();
                    }
                }
            });

        }
    }// GEN-LAST:event_trainingButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JToggleButton trainingButton;
    // End of variables declaration//GEN-END:variables
    protected TimeSeries<Observation> currentTrainingTimeSeries;
    private Color idleBorderColor;

    @Override
    public void modelTrainerStatusChanged(StatusChangedEvent evt) {
        System.out.println("Trainer panel receives " + evt);
        switch (evt.getCurrentStatus()) {
            case RUNNING: {
                saveButton.setEnabled(false);
                infoTextArea.append("training with " + trainer.getInputSize());
                addTrainingIconToButtonButton();
                break;
            }
            case READY: {
                removeTrainingIconFromButton();
                infoTextArea.append("finished \n");
                saveButton.setEnabled(true);
                if (trainingButton.isSelected()) {
                    trainingButton.setSelected(false);
                }
                break;
            }
        }
    }

    private void removeTrainingIconFromButton() {
        trainingButton.setIcon(null);
    }

    protected void addTrainingIconToButtonButton() {
        // Look for the image.
        String imgLocation = "";
        URL imageURL = RecorderPanel.class.getResource("/toolbarButtonGraphics/general/Stop24.gif");

        // Create and initialize the button.

        if (imageURL != null) { // image found
            trainingButton.setIcon(new ImageIcon(imageURL));
        } else { // no image found
            System.err.println("Resource not found: " + imgLocation);
        }

    }

}
