package aucom.main;

import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Logger;

import aucom.data.AbstractData;
import aucom.data.DataSequence;
import aucom.models.t2gram.DurationPobabilityModel;

public class AnomalyRecognition {
	DurationPobabilityModel normalModel;
	File normalModelFile = new File("/home/rgolombe/workspace/aucom/data/tobi/session_iros10/model/hist100_norm134.md");
	
	DurationPobabilityModel cpuModel;
	File cpuModelFile = new File("");
	
	DurationPobabilityModel asyncModel;
	File asyncModelFile = new File("");
	
	DurationPobabilityModel prbfslamModel;
	File prbfslamModelFile = new File("");
	DurationPobabilityModel playerModel;
	File playerModelFile = new File("");
	public AnomalyRecognition() {
		trainModels();
	}
	public void trainModels(){
		normalModel = loadModel(normalModelFile);
		cpuModel = loadModel(cpuModelFile);
		asyncModel = loadModel(asyncModelFile);
		prbfslamModel = loadModel(prbfslamModelFile);
		playerModel = loadModel(playerModelFile);
	}
	public void test(File f){
		
	}
	
	public static void main(String[] args) {

	}
	public void save(File f, DataSequence sequence){
		System.out.println("saving to : " +f);
		FileWriter writer;
		DecimalFormat formatter = new DecimalFormat("0.00000000"); 
		try {
			writer = new FileWriter(f);
			for (int i = 0; i< sequence.size(); i++) {
				AbstractData s = sequence.get(i);
				String outpurString = "";
				outpurString += s.getTimestamp();
				outpurString += ";";
				try {
					outpurString += formatter.parse(formatter.format(s.getScoreValue()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				outpurString += ";";
				outpurString += s.getIsAbnormal();
				outpurString += ";";
				outpurString += s.getEventTypeId();
				outpurString += "\n";
				writer.write(outpurString);
			}
			writer.close();
		} catch (IOException e) {
			Logger.getLogger(this.getClass().getCanonicalName())
					.severe(
							"couldn't write to file "
									+ f.getAbsolutePath());
		}
}
	private DurationPobabilityModel loadModel(File file){
		ObjectInputStream in;
		 
		try {
			in = new ObjectInputStream(new FileInputStream(file));
			DurationPobabilityModel m = (DurationPobabilityModel) in.readObject();
			return m;
		} catch (EOFException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return null;
	}

}
